import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Preview Player"
  String get previewPlayer => "Preview Player";
  /// "Track Details"
  String get trackDetails => "Track Details";
  /// "Go back with result - OK"
  String get goBackWithResult => "Go back with result - OK";
  /// "Are you sure you want to exit the application?"
  String get exit_question => "Are you sure you want to exit the application?";
  /// "Something went wrong!"
  String get something_went_wrong => "Something went wrong!";
  /// "We have some error: "
  String get some_error => "We have some error: ";
  /// "List of tracks is empty"
  String get empty_list => "List of tracks is empty";
  /// "No route defined for "
  String get no_route => "No route defined for ";
  /// "Search tracks"
  String get search_tracks => "Search tracks";
  /// "Current track"
  String get current_track => "Current track";
  /// "OK"
  String get ok => "OK";
  /// "NO"
  String get no => "NO";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  /// "Превью песен"
  @override
  String get previewPlayer => "Превью песен";
  /// "Детали песни"
  @override
  String get trackDetails => "Детали песни";
  /// "Вернуться назад с результатом - Окей"
  @override
  String get goBackWithResult => "Вернуться назад с результатом - Окей";
  /// "Вы уверены что хотите выйти из приложения?"
  @override
  String get exit_question => "Вы уверены что хотите выйти из приложения?";
  /// "Что то пошло не так!"
  @override
  String get something_went_wrong => "Что то пошло не так!";
  /// "Мы получили ошибку: "
  @override
  String get some_error => "Мы получили ошибку: ";
  /// "Список песен пуст"
  @override
  String get empty_list => "Список песен пуст";
  /// "Нет пути для "
  @override
  String get no_route => "Нет пути для ";
  /// "Поиск песен"
  @override
  String get search_tracks => "Поиск песен";
  /// "Текущая песня"
  @override
  String get current_track => "Текущая песня";
  /// "OK"
  @override
  String get ok => "OK";
  /// "НЕТ"
  @override
  String get no => "НЕТ";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("ru", "RU")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}